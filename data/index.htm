<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>ESP8266 GameBoy Printer</title>
	<script src="js/processing.min.js"></script>
	<script src="js/jquery.min.js"></script>
	<script src="js/jdataview.js"></script>
	<script src="js/jbinary.js"></script>
	<script src="js/spectrum.min.js"></script>
	<link rel="stylesheet" href="style.css" media="screen" title="no title" charset="utf-8">
	<link rel="stylesheet" href="js/spectrum.min.css">
</head>
<body>
	<h1>ESP8266 Gameboy Printer</h1>
	<p>Get the latest photo printed!</p>
	<select id="img_list"></select>
	<button id="refresh">Refresh</button>
	<div>
		<label for="color_black">Black: </label>
		<input id='color_black' />

		<label for="color_white">White: </label>
		<input id='color_white' />
	</div>
	<br>
	<div id="image-container"></div>
	<br>
	<button id="rm">Remove all Pictures</button>
	<script>
	var allImgs = {};
	var Printer = function(url, colors) {
		var that = this;
		jBinary.load(url, {magic: ['array', 'uint8']}, function (err, binary) {
			if (err) throw err;
			that.raw = binary.read('magic');
			that.dimensions.height = (that.raw.length / 40);
			that.dimensions.width = 160;
			if (typeof colors !== 'undefined') {
					that.color.white = colors.white;
					that.color.black = colors.black;
			}
			that.sketchProcess = function(processing) {
				processing.draw = function() {
					var extract2BitsFromByte = function(byte) {
						var result = [];
						result[0] = byte.substring(0,2);
						result[1] = byte.substring(2,4);
						result[2] = byte.substring(4,6);
						result[3] = byte.substring(6);
						return result;
					}
					var drawLine = function(bytes, x_offset, y_offset) {
						bytes[0] = processing.binary(bytes[0], 8);
						bytes[1] = processing.binary(bytes[1], 8);
						var white = processing.color(that.color.white.r, that.color.white.g, that.color.white.b);
						var black = processing.color(that.color.black.r, that.color.black.g, that.color.black.b);
						var lgrey = processing.lerpColor(white, black, 0.5);
						var dgrey = processing.lerpColor(white, black, 0.2);

						for (var i = 0; i < bytes[0].length; i++) {
							switch(bytes[0][i] + bytes[1][i]) {
								case '00':
								processing.stroke(white);
								break;
								case '01':
								processing.stroke(lgrey);
								break;
								case '10':
								processing.stroke(dgrey);
								break;
								case '11':
								processing.stroke(black);
								break;
								default:
								console.log('Shall not be here');
								break;
							}
							processing.point(i + x_offset, y_offset);
						}
					}
					var drawTile = function(bytes, x_offset, y_offset) {
						if(bytes.length != 16) return false;
						for (var y = 0; y < 16; y++) {
							drawLine(bytes.slice(y*2, y*2+2), x_offset, y + y_offset);
						}
					}
					var drawImage = function(img_data) {
						processing.scale(that.multiplier);
						var temp_y = 0;
						for (var band_y = 0; band_y < that.dimensions.height; band_y+=8) {
							var temp_x = 0;
							for (var band_x = 0; band_x < that.dimensions.width; band_x += 8) {
								var s_start = (20*temp_y+temp_x)*16;
								drawTile(img_data.slice(s_start, s_start+16), band_x, band_y);
								temp_x++;
							}
							temp_y++;
						}
						processing.scale(1/that.multiplier);
					}
					processing.width = that.dimensions.width * that.multiplier;
					processing.height = that.dimensions.height * that.multiplier;
					drawImage(that.raw);
				}
			}
			that.el = document.createElement('canvas');

			that.pjs = new Processing(that.el, that.sketchProcess);
			that.pjs.draw();
			var dataUrl = that.el.toDataURL('image/png');
			var img = document.createElement('img')
			img.setAttribute('src', dataUrl);
			$('#image-container').children().remove();
			$('#image-container').append(img);
			that.pjs.exit();
		});

	}

	Printer.prototype = {
		multiplier: 3,
		dimensions: {
			height: 0,
			width: 0
		},
		color: {
			white: {
				r: 255,
				g: 255,
				b: 255
			},
			black: {
				r: 0,
				g: 0,
				b: 0
			},
		}
	}


	function refreshImgs () {
			$('#img_list').children().remove();
			$.get('list_img', function(data) {
				$.each(data, function(i, v) {
					$('#img_list').append('<option value="' + v.name + '">Picture '+ (i+1) +'</option>');
				});
				$('#img_list').prepend('<option value="0">--Select One--</option>');
			});
	}

	$('#rm').click(function() {
		if(window.confirm('Are you sure?')) {
			$.get('remove_all', function(data) {
				if (data) {
					alert('Success!');
					refreshImgs();
				} else {
					alert('Failed...');
				}
			});
		}
	});

	$('#refresh').click(function () {
			refreshImgs();
	});

	refreshImgs();

	$('body').on('change', '#img_list', function() {
		printed_image = {};
		if ($('#img_list').val() !== '0') {
			printed_image = new Printer($('#img_list').val());
		}
	});

	var color_palette = [
		["#000","#444","#666","#999","#ccc","#eee","#f3f3f3","#fff"],
		["#f00","#f90","#ff0","#0f0","#0ff","#00f","#90f","#f0f"],
		["#f4cccc","#fce5cd","#fff2cc","#d9ead3","#d0e0e3","#cfe2f3","#d9d2e9","#ead1dc"],
		["#ea9999","#f9cb9c","#ffe599","#b6d7a8","#a2c4c9","#9fc5e8","#b4a7d6","#d5a6bd"],
		["#e06666","#f6b26b","#ffd966","#93c47d","#76a5af","#6fa8dc","#8e7cc3","#c27ba0"],
		["#c00","#e69138","#f1c232","#6aa84f","#45818e","#3d85c6","#674ea7","#a64d79"],
		["#900","#b45f06","#bf9000","#38761d","#134f5c","#0b5394","#351c75","#741b47"],
		["#600","#783f04","#7f6000","#274e13","#0c343d","#073763","#20124d","#4c1130"]
	];

	whiteValue = Printer.prototype.color.white;
	blackValue = Printer.prototype.color.black;

	var blackPicker = $("#color_black").spectrum({
		color: Printer.prototype.color.black,
		showPalette: true,
		palette: color_palette,
		change: function (color) {
				blackValue = color.toRgb();
				new Printer($('#img_list').val(), { white: whiteValue, black: blackValue });
		}
	});
	var whitePicker = $("#color_white").spectrum({
		color: Printer.prototype.color.white,
		showPalette: true,
		palette: color_palette,
		change: function(color) {
				whiteValue = color.toRgb();
				new Printer($('#img_list').val(), { white: whiteValue, black: blackValue });
		}
	});
	</script>
</body>
</html>
